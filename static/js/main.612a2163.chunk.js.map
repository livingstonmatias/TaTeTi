{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","jugadorTurno","setJugadorTurno","items","setItems","resetearJuego","nuevosItems","i","push","index","jugador","valor","useEffect","length","forEach","caso","item1","find","item","item2","item3","alert","className","map","key","onClick","el","seleccionarItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wJAoGeA,MAjGf,WAAgB,IAAD,EAC2BC,oBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAIPC,EAAgB,WAEpB,IADA,IAAMC,EAAc,GACXC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAYE,KAAK,CAAEC,MAAOF,EAAGG,QAAS,KAAMC,MAAO,OAErDP,EAASE,IAgEX,OAXAM,qBAAU,WACRP,MACC,IAEHO,qBAAU,WACJT,EAAMU,OAAS,IA9BL,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,SAAQ,SAACC,GACb,IAAMC,EAAQb,EAAMc,MAAK,SAACC,GAAD,OAAUA,EAAKT,QAAUM,EAAK,MACjDI,EAAQhB,EAAMc,MAAK,SAACC,GAAD,OAAUA,EAAKT,QAAUM,EAAK,MACjDK,EAAQjB,EAAMc,MAAK,SAACC,GAAD,OAAUA,EAAKT,QAAUM,EAAK,MAEnDC,EAAML,OAASQ,EAAMR,OAASS,EAAMT,OAClCK,EAAML,QAAUQ,EAAMR,OAASQ,EAAMR,QAAUS,EAAMT,QACvDU,MAAM,2BAAD,OAA4BpB,EAAe,EAAI,IACpDI,QAaJH,GAAiBD,MAElB,CAACE,IAGF,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,aAAlB,0BAC0BrB,EAAe,EAAI,GAE7C,0BAAMqB,UAAU,WACd,yBAAKA,UAAU,WACZnB,EAAMoB,KAAI,SAACL,GACV,OACE,yBACEM,IAAKN,EAAKT,MACVa,UAAU,OACVG,QAAS,kBAzEC,SAACP,GAOvB,IANuBf,EAAMc,MAAK,SAACS,GACjC,GAAIA,EAAGjB,QAAUS,EAAKT,OAASS,EAAKP,MAClC,OAAO,KAIU,CACnB,IAAML,EAAcH,EAAMoB,KAAI,SAACG,GAC7B,OAAIA,EAAGjB,QAAUS,EAAKT,MACb,CACLA,MAAOS,EAAKT,MACZC,QAAST,EACTU,MAAOV,EAAe,IAAM,KAIzByB,KAGTtB,EAASE,IAqDgBqB,CAAgBT,KAE9BA,EAAKP,cC9EFiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.612a2163.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [jugadorTurno, setJugadorTurno] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  const resetearJuego = () => {\r\n    const nuevosItems = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      nuevosItems.push({ index: i, jugador: null, valor: null });\r\n    }\r\n    setItems(nuevosItems);\r\n  };\r\n\r\n  const seleccionarItem = (item) => {\r\n    const yaJuegoElTurno = items.find((el) => {\r\n      if (el.index === item.index && item.valor) {\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (!yaJuegoElTurno) {\r\n      const nuevosItems = items.map((el) => {\r\n        if (el.index === item.index) {\r\n          return {\r\n            index: item.index,\r\n            jugador: jugadorTurno,\r\n            valor: jugadorTurno ? \"X\" : \"O\",\r\n          };\r\n        }\r\n\r\n        return el;\r\n      });\r\n\r\n      setItems(nuevosItems);\r\n    }\r\n  };\r\n\r\n  const verificaSiHayGanador = () => {\r\n    const casos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    casos.forEach((caso) => {\r\n      const item1 = items.find((item) => item.index === caso[0]);\r\n      const item2 = items.find((item) => item.index === caso[1]);\r\n      const item3 = items.find((item) => item.index === caso[2]);\r\n\r\n      if (item1.valor && item2.valor && item3.valor) {\r\n        if (item1.valor === item2.valor && item2.valor === item3.valor) {\r\n          alert(`Felicidades al jugador: ${jugadorTurno ? 1 : 2}`);\r\n          resetearJuego();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetearJuego();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (items.length > 0) {\r\n      verificaSiHayGanador();\r\n      setJugadorTurno(!jugadorTurno);\r\n    }\r\n  }, [items]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"AppHeader\">\r\n        Turno para el jugador: {jugadorTurno ? 1 : 2}\r\n      </header>\r\n      <main className=\"AppMain\">\r\n        <div className=\"Tablero\">\r\n          {items.map((item) => {\r\n            return (\r\n              <div\r\n                key={item.index}\r\n                className=\"Item\"\r\n                onClick={() => seleccionarItem(item)}\r\n              >\r\n                {item.valor}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}